package lk.newnop.brms_api.service.impl;

import lk.newnop.brms_api.controller.request.BookRequestDTO;
import lk.newnop.brms_api.exception.DuplicateBookException;
import lk.newnop.brms_api.exception.NotFoundException;
import lk.newnop.brms_api.model.Book;
import lk.newnop.brms_api.model.BookStatus;
import lk.newnop.brms_api.repository.BookRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BookServiceImplUnitTest {

    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private BookServiceImpl bookService;

    @Test
    @DisplayName("Create book - Success with auto-generated ID")
    void createBook_Success_AutoGeneratedId() {
        BookRequestDTO request = new BookRequestDTO();
        request.setTitle("Test Book");
        request.setAuthor("Author");
        request.setGenre("Fiction");

        when(bookRepository.existsByTitleAndAuthor("Test Book", "Author")).thenReturn(false);

        Book savedBook = new Book();
        savedBook.setId(1L);
        savedBook.setTitle("Test Book");
        savedBook.setAuthor("Author");
        savedBook.setGenre("Fiction");
        savedBook.setAvailabilityStatus(BookStatus.AVAILABLE);

        when(bookRepository.save(any(Book.class))).thenReturn(savedBook);

        Book result = bookService.create(request);

        assertNotNull(result);
        assertEquals("Test Book", result.getTitle());
        assertEquals(BookStatus.AVAILABLE, result.getAvailabilityStatus());
        verify(bookRepository, times(1)).save(any(Book.class));
    }

    @Test
    @DisplayName("Create book - Duplicate Book Exception")
    void createBook_Duplicate_ThrowsException() {
        BookRequestDTO request = new BookRequestDTO();
        request.setTitle("Test Book");
        request.setAuthor("Author");

        when(bookRepository.existsByTitleAndAuthor("Test Book", "Author")).thenReturn(true);

        assertThrows(DuplicateBookException.class, () -> bookService.create(request));
        verify(bookRepository, never()).save(any(Book.class));
    }

    @Test
    @DisplayName("Find book by ID - Success")
    void findBookById_Success() throws NotFoundException {
        Book book = new Book();
        book.setId(1L);
        book.setTitle("Book Title");

        when(bookRepository.findById(1L)).thenReturn(Optional.of(book));

        Book result = bookService.findById(1L);

        assertEquals("Book Title", result.getTitle());
        verify(bookRepository, times(1)).findById(1L);
    }

    @Test
    @DisplayName("Find book by ID - Not Found")
    void findBookById_NotFound() {
        when(bookRepository.findById(99L)).thenReturn(Optional.empty());

        assertThrows(NotFoundException.class, () -> bookService.findById(99L));
        verify(bookRepository, times(1)).findById(99L);
    }

    @Test
    @DisplayName("Find all books - Success")
    void findAllBooks_Success() {
        Book b1 = new Book();
        b1.setId(1L);
        b1.setTitle("Book 1");

        Book b2 = new Book();
        b2.setId(2L);
        b2.setTitle("Book 2");

        when(bookRepository.findAll()).thenReturn(Arrays.asList(b1, b2));

        List<Book> result = bookService.findAll();

        assertEquals(2, result.size());
        assertEquals("Book 1", result.get(0).getTitle());
        verify(bookRepository, times(1)).findAll();
    }

    @Test
    @DisplayName("Update book - Success")
    void updateBook_Success() throws NotFoundException {
        Book existing = new Book();
        existing.setId(1L);
        existing.setTitle("Old Title");

        BookRequestDTO request = new BookRequestDTO();
        request.setTitle("New Title");
        request.setAuthor("Author");
        request.setGenre("Fiction");
        request.setAvailabilityStatus(BookStatus.RENTED);

        when(bookRepository.findById(1L)).thenReturn(Optional.of(existing));
        when(bookRepository.save(any(Book.class))).thenReturn(existing);

        Book result = bookService.updateById(1L, request);

        assertEquals("New Title", result.getTitle());
        assertEquals(BookStatus.RENTED, result.getAvailabilityStatus());
        verify(bookRepository, times(1)).save(any(Book.class));
    }

    @Test
    @DisplayName("Delete book - Success")
    void deleteBook_Success() throws NotFoundException {
        Book existing = new Book();
        existing.setId(1L);

        when(bookRepository.findById(1L)).thenReturn(Optional.of(existing));
        doNothing().when(bookRepository).delete(existing);

        bookService.deleteById(1L);

        verify(bookRepository, times(1)).delete(existing);
    }

    @Test
    @DisplayName("Get all books by status - Success")
    void getAllBooksByStatus_Success() {
        Book book = new Book();
        book.setAvailabilityStatus(BookStatus.AVAILABLE);

        when(bookRepository.findByAvailabilityStatus(BookStatus.AVAILABLE)).thenReturn(Arrays.asList(book));

        List<Book> result = bookService.getAllBooksByStatus(BookStatus.AVAILABLE);

        assertEquals(1, result.size());
        assertEquals(BookStatus.AVAILABLE, result.get(0).getAvailabilityStatus());
        verify(bookRepository, times(1)).findByAvailabilityStatus(BookStatus.AVAILABLE);
    }
}
